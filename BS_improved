.data
arr: .word 1 2 3 4 5 6 7 8 9 10
length: .word 10
taget: .word 0

.text
lui x31 0x10000
addi x3 x0 0 #lower index
lw x4 40 x31 #the length
addi x4 x4 -1 # the upper index
lw x5 44 x31 #the target

jal x1 binarySearch

jal x0 exit

binarySearch:
    addi x2 x2 -12
    sw x1 8 x2
    sw x3 4 x2 #the lower index
    sw x4 0 x2 #the upper index
    
    bgt x3 x4 not_found
    
    add x25 x3 x4
    srai x25 x25 1 #mid index
    slli x6 x25 2 #the offset
    add x28 x6 x31 #mid address
    lw x8 0 x28 #the mid value
    
    blt x8 x5 search_right #the mid is smaller so increase the lower idx
    blt x5 x8 search_left #the mid is larger so decrease the upper idx
    beq x5 x8 found #target found
    
return_add: 
    lw x1 8 x2
    lw x3 4 x2
    lw x4 0 x2
    addi x2 x2 12
    jalr x0 x1 0
    
search_right:
    addi x3 x25 1
    jal x1 binarySearch
    jal x0 return_add
    
search_left:
    addi x4 x25 -1
    jal x1 binarySearch
    jal x0 return_add
    
found:
    add x10 x0 x25
    jal x0 return_add

not_found:
    addi x10 x0 -1
    jal x0 return_add
    
exit:
